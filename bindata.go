// Code generated by go-bindata.
// sources:
// static/random.html
// DO NOT EDIT!

package random

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _randomHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\xf9\x73\xd3\x38\x14\xfe\x79\xfb\x57\x68\x5d\x76\xec\x6c\x6a\xc7\x49\x0f\x4a\xea\x84\xe5\x58\x98\x32\x5c\x5b\x8e\x19\x96\xe5\x07\xc5\x7e\x8e\x55\x6c\xc9\x48\x72\x43\x60\xfa\xbf\xef\x93\x1d\x1f\xb9\x00\x65\x12\x1f\x7a\xfa\xf4\xbd\x43\x9f\x94\xe0\xf7\x48\x84\x7a\x99\x03\x49\x74\x96\x4e\x0f\x0e\x02\x73\x25\x29\xe5\xf3\x89\x05\xdc\x9a\xe2\x0b\xa0\xd1\xf4\x80\x90\x20\x03\x4d\x49\x98\x50\xa9\x40\x4f\xac\x42\xc7\xee\x39\xf6\x9b\x1e\xcd\x74\x0a\xd3\x2b\xca\x23\x91\x91\x7f\x0a\xa1\x81\xbc\xa0\x61\xc2\x38\x04\x83\xaa\x0f\xad\xd0\x4e\x85\x92\xe5\x9a\x28\x19\x4e\xac\x44\xeb\x5c\x8d\x07\x83\x50\x44\xe0\x5d\x7f\x29\x40\x2e\xbd\x50\x64\x83\xea\xd6\x3d\xf6\x86\xf8\xc9\x18\xf7\xae\x95\x45\x18\xd7\x30\x97\x4c\x2f\x27\x96\x4a\xe8\xe8\xf4\xcc\x4d\xde\xbf\xe7\x1f\x28\x7b\xf0\xf8\xea\xed\xab\xd1\xeb\x6f\xef\x9e\x66\xc5\xf3\x67\xf2\xfc\xe1\xf3\x77\x6f\xae\x9f\x5e\xfe\xab\x1e\x7f\x78\x9a\x5d\x3e\x7b\x7e\x33\x9a\x9d\x4f\x2c\x12\x4a\xa1\x94\x90\x6c\xce\xf8\xc4\xa2\x5c\xf0\x65\x26\x0a\x65\x4d\x83\x41\x45\x69\xc5\x2f\x65\xfc\x33\x49\x24\xc4\x2d\xbd\x58\x70\xad\xbc\xb9\x10\xf3\x14\x68\xce\x54\xc9\x31\x54\xea\x7e\x4c\x33\x96\x2e\x27\xaf\xd4\x82\xa6\x91\x45\x24\xa4\xc8\x4d\x2f\x53\x50\x09\x80\xb6\x7e\xe0\x71\xa1\xc0\x33\xb0\x74\x01\x4a\x64\x50\x22\x8e\xe8\xec\xc4\x3f\x86\xbb\xa7\x91\xf1\xb7\xc3\xcb\x84\xb7\x84\xad\x00\x67\x22\x5a\x1e\x95\xb9\x22\xdf\xcb\x17\x19\x95\xe8\xd4\x98\xf8\x17\xe5\x63\x02\x6c\x9e\xe8\x31\x19\xfa\xfe\x1f\xd5\x9b\xdb\x66\x5c\x35\xc0\x34\x33\xbb\x5b\x39\x30\x26\x95\x07\x17\x4d\xa7\x96\x94\x2b\xa6\x99\x40\xd4\x19\x0d\x3f\xcf\xa5\x28\x78\x44\x86\xaa\xc6\x2b\x2f\x0a\x42\x63\xb2\x62\x11\x31\x95\xa7\x14\xc1\xe2\x14\xbe\x56\x76\xe6\xce\x8d\x98\xac\xec\xc6\x44\x8a\xc5\x1a\xc5\x2e\xc3\xf2\x42\xa5\x66\x61\x0a\x1b\x7e\xd1\x42\x8b\xca\x6c\xc1\x22\x9d\x8c\xc9\x89\xef\xe7\xab\x29\x5a\x76\x6e\x28\x52\x21\xc7\x64\x91\x30\x0d\xab\x4e\x21\x23\x90\xae\xa4\x11\x2b\xd4\x98\x8c\x70\x14\xf1\xab\xcb\xa8\x41\xc8\x69\x14\x31\x3e\x37\xf1\x6a\x40\xc5\x57\x17\x6b\x2c\x12\x0b\x0c\x2a\x7e\x8e\xcd\x08\xd7\xf4\x93\x43\xdf\xf7\xbb\x41\x4d\x86\x1b\x21\x55\xec\x1b\x8c\xc9\xf1\xa8\xc6\x32\x0d\x6b\x0a\xdc\x3a\x2d\xc7\x67\x75\x57\x8d\x30\x9e\x41\x2c\x24\x1c\x91\xfa\x99\xc6\x1a\xe4\x9e\x54\x3d\xc1\x87\x07\x55\xd5\x5c\xec\x9a\x79\x38\xaa\x63\x6a\x9a\xc8\x69\x88\x4b\x66\x4c\xee\xad\xd7\x42\x33\x69\x3b\x4b\x88\x18\xc0\x91\xa0\xf5\x5f\x3c\xf4\x23\xab\x05\xa9\xf2\xe0\xca\xba\xac\xb6\xf8\x6f\xf0\x5d\x47\x82\x6d\xa4\x14\xe2\x5d\x40\xa3\x16\x42\xc3\x57\xed\xd2\x94\xcd\x4d\xd5\x98\x79\xbb\x86\x9c\xde\xb4\x96\x3b\xca\xce\xb4\xeb\x42\x69\x16\x2f\xdd\x86\x8b\xc2\x48\x80\x3b\x03\xbd\x00\xe0\x5d\x34\x2f\xa3\x73\x16\x3e\x2c\xb4\x6e\x4a\xb9\x2c\xc5\x3c\x07\x8a\xcb\x20\xc4\x98\xa2\x58\x74\x82\xdd\xad\x8e\xf5\x1e\x51\x68\x93\xea\xcd\xd7\x75\x1d\xb7\x0e\x9b\xd6\xd4\xdd\x29\x96\xd5\x69\xb7\xa7\x2a\xdb\xed\x69\xd7\x8a\xf9\xa4\x3b\x62\x55\xfa\x87\x71\x1c\x5f\xfc\x7c\x85\x1b\xbf\x51\x5d\x2a\x45\x09\x06\x95\xb8\x07\x46\x1e\x6a\xc5\xaa\x16\xec\xb4\x81\x0a\x56\x0b\x73\x1a\x24\x43\x14\x26\xf3\x93\x8c\xcc\x0d\xfe\x60\x36\xa6\xc1\xac\x0a\x5f\x98\x52\xa5\x26\x56\x27\xa2\xa8\xdb\xd1\xc4\x32\x41\x47\x3d\x0c\x58\x6d\x11\x53\x12\x53\x57\x2f\x98\xc6\xca\x31\x5a\xc7\xf0\x5b\x81\xfc\x14\x8c\xc3\xa2\xdc\x5f\xac\xe9\x4b\x58\x54\x5b\x4d\x3b\x76\x50\xd2\x19\xd4\x7c\x2b\x7f\x06\x8d\x43\x5d\x45\x6e\xdd\x8b\x0b\x5e\x29\xd9\x1c\x74\xb5\x83\x3d\x32\x01\x75\x7a\x9d\x7a\xa8\xdb\x0d\x95\x24\x05\x43\x5b\x91\x09\xb1\xfd\xe1\xe8\xf8\xe4\xf4\xec\xee\xf9\xbd\x07\x0f\x1f\x3d\xfe\xfb\x89\x7d\xb1\x73\x44\x99\x20\x63\x7f\xb8\xc3\x00\xd7\x21\x71\x8c\x15\x43\x0b\xff\x02\x2f\x01\x39\xc3\x4b\xbf\x4f\x76\x31\x68\x12\x4e\xfa\x93\x9a\xca\xc7\x17\x54\x27\x5e\x9c\x0a\x64\x5d\xde\xca\xd2\x0d\xf4\xe0\x4f\x32\x3c\xeb\x7d\xda\x9e\xf4\x76\xeb\x8d\x04\x5d\x48\x5e\x41\xb7\xf6\xb7\x3b\xa3\x54\x46\xdd\xe9\x6d\x90\xbb\xe3\x61\xd7\xb3\x37\xaf\x5e\x3a\xd6\xe0\x8b\xb1\x50\xd6\x51\x33\xcc\xa1\x3b\x9d\x61\x31\x71\xa8\x97\x02\x9f\xeb\x04\xfd\x1e\x6e\x62\xd6\xd0\x8e\x9d\x0c\xed\x9e\x67\xb6\x3d\xc7\x0a\x20\x9b\xbe\x96\x62\x96\x42\x46\xae\x40\x4b\x06\x37\xb8\x94\x48\x2c\xf1\xec\x81\x3b\x74\x30\xc0\x7e\xab\xb7\xed\x74\x8d\x34\x5a\x43\x7a\x24\xb2\xbc\xc0\x28\x12\x45\x97\x0a\x57\xdd\xfe\xe1\xb7\x90\x2a\xd8\x4d\xd0\xe4\x4f\xb6\xb5\x83\x99\xdc\x2c\xa6\xbd\x74\xcc\xca\x43\x42\x78\xa2\x70\xbe\x13\xbb\xdd\xd1\xec\x71\x17\xf1\x88\xd8\x65\x6a\x6c\xb2\xf6\x9a\xdc\xee\x07\xee\x4a\xdb\x6a\x02\x7b\x73\xc3\xb4\x8f\xba\x68\x7b\xb0\x50\x45\x95\x48\xc1\x4b\xc5\xdc\xa1\x1f\xfd\x4f\x3f\x08\x6d\x93\xa4\x3b\xa5\xa5\xb7\x12\xe0\x9e\x67\x24\xdd\xe9\xfd\x4a\x52\xca\x71\xe5\x99\x71\x8f\xb5\x89\x35\x2a\xb0\x84\xb7\x88\x89\x91\x06\x6e\x4e\x90\xef\xae\x2e\x4d\x26\x51\x34\xb9\x76\x6c\xcb\xee\xef\x66\xd0\xb7\x2d\x62\xf7\xdb\x39\xfa\x76\xfd\x68\x8e\x7e\xf8\xe4\xdc\x30\x4a\xfe\xca\x53\x11\xe9\x9b\x9e\xbd\x97\xb0\x75\x58\xa9\x5a\xcf\x2b\xf8\x8c\xf1\x68\x7f\x82\x5b\xcb\x30\x65\xe1\x67\xa7\x59\x11\xfb\x56\xb7\x69\x0b\x84\x14\x0b\x4f\xe4\xc0\x9d\xe6\xd8\xb8\x12\xcc\xf2\xb8\x58\x06\xe0\xbe\xf1\x69\x62\xf5\x9b\x68\xec\x21\xb1\xb3\x48\xb6\x25\x00\xd3\xb0\x92\x4a\xcc\x45\x4c\x23\xb8\xe4\x5b\x6e\x75\xa1\x5a\x84\x3b\x0e\xc1\x7f\x11\x45\x86\x81\x26\x3d\x4f\xe2\x96\xb2\xdc\xef\xe7\xda\x34\x09\x8b\x60\x73\x92\x56\x61\x2e\x36\x06\x12\xeb\xb0\xd1\x7f\xf2\x4b\x01\xdd\x87\x65\xfc\x38\x20\xbf\x75\x5d\x6a\x8f\xdc\xb8\xa1\x94\xdb\x21\x6e\x71\xe5\x7f\xa2\xff\x03\x00\x00\xff\xff\xb5\x01\x44\x73\x24\x0d\x00\x00")

func randomHtmlBytes() ([]byte, error) {
	return bindataRead(
		_randomHtml,
		"random.html",
	)
}

func randomHtml() (*asset, error) {
	bytes, err := randomHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "random.html", size: 3364, mode: os.FileMode(436), modTime: time.Unix(1481025748, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"random.html": randomHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"random.html": &bintree{randomHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

