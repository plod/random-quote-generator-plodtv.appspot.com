// Code generated by go-bindata.
// sources:
// static/random.html
// DO NOT EDIT!

package random

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _randomHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x7b\x73\xa3\x46\x12\xff\xfb\xfc\x29\xfa\xf0\x5e\x40\x27\xf3\x90\xfc\x88\x83\x00\xdf\x3e\x2e\x5b\xde\xda\x64\x73\x4e\x36\x55\xb9\x3d\x57\x6a\x04\x0d\x8c\x17\x66\xc8\xcc\x60\x59\x49\xf9\xbb\x5f\x0d\x88\x87\x5e\xc9\x52\x65\x03\x33\xdd\xbf\xfe\xf5\x83\xee\x51\xf0\xf7\x84\xc7\x6a\x5d\x21\xe4\xaa\x2c\xa2\x93\x93\x40\xdf\xa1\x20\x2c\x0b\x0d\x64\x46\x74\x12\xe4\x48\x92\xe8\x04\x20\x28\x51\x11\x88\x73\x22\x24\xaa\xd0\xa8\x55\x6a\x5f\x1b\xd1\x89\xde\x51\x54\x15\x18\xdd\x11\x96\xf0\x12\xfe\x53\x73\x85\xf0\x1d\x89\x73\xca\x30\x70\xdb\xbd\x13\x00\x80\x40\xc6\x82\x56\x0a\xa4\x88\x43\x23\x57\xaa\x92\xbe\xeb\xc6\x3c\x41\xe7\xe1\xb7\x1a\xc5\xda\x89\x79\xe9\xb6\x8f\xf6\xb9\x33\x73\x66\x4e\x49\x99\xf3\x20\x0d\xa0\x4c\x61\x26\xa8\x5a\x87\x86\xcc\xc9\xfc\xf2\xca\xce\x7f\xfe\x99\xfd\x42\xe8\xcb\x37\x77\x3f\x7d\x98\xff\xf0\xfb\xc7\xb7\x65\xfd\xfe\x9d\xb8\x7e\xf5\xfe\xe3\x8f\x0f\x6f\x6f\xff\x2b\xdf\xfc\xf2\xb6\xbc\x7d\xf7\xfe\x71\xbe\xbc\x0e\x0d\x88\x05\x97\x92\x0b\x9a\x51\x16\x1a\x84\x71\xb6\x2e\x79\x2d\x8d\x28\x70\x5b\x4a\x1b\x7e\x05\x65\x9f\x21\x17\x98\x0e\xf4\x52\xce\x94\x74\x32\xce\xb3\x02\x49\x45\x65\xc3\x31\x96\xf2\x26\x25\x25\x2d\xd6\xe1\x07\xb9\x22\x45\x62\x80\xc0\x22\x34\xa4\x5a\x17\x28\x73\x44\x65\xfc\x89\xc7\xb5\x44\x47\xc3\x92\x15\x4a\x5e\x62\x83\x38\x27\xcb\x0b\xef\x1c\xbf\xbe\x4c\xb4\xbf\x23\x5e\x3a\xbc\x0d\x6c\x0b\xb8\xe4\xc9\xfa\xac\xc9\x15\xfc\xd1\x2c\x94\x44\x64\x94\xf9\xe0\x2d\x9a\xd7\x1c\x69\x96\x2b\x1f\x66\x9e\xf7\x8f\x76\xe5\xb9\xd7\x6b\x15\xf4\xa5\xad\xdb\xad\x03\x3e\xb4\x1e\x2c\xfa\x4d\x25\x08\x93\x54\x51\xce\x7c\x58\x92\xf8\x73\x26\x78\xcd\x12\x98\xc9\x0e\xaf\xb9\x49\x8c\xb5\xc8\x86\x45\x42\x65\x55\x90\xb5\x0f\x69\x81\x4f\xad\x9c\x7e\xb2\x13\x2a\x5a\x39\x1f\x04\x5f\x6d\x51\x1c\x33\x6c\x6e\x44\x28\x1a\x17\xb8\xe3\x17\xa9\x15\x6f\xc5\x56\x34\x51\xb9\x0f\x17\x9e\x57\x6d\x4c\x0c\xec\xec\x98\x17\x5c\xf8\xb0\xca\xa9\xc2\xcd\x26\x17\x09\x0a\x5b\x90\x84\xd6\xd2\x87\xb9\x57\x3d\x81\xd7\xde\xe6\x3d\x42\x45\x92\x84\xb2\x4c\xc7\xab\x07\xe5\x4f\xb6\xcc\x49\xc2\x57\x3e\x78\xe0\xc1\xb9\xd6\xb0\xf5\x3e\x9c\x7a\x9e\x37\x0e\x6a\x3e\xdb\x09\xa9\xa4\xbf\xa3\x0f\xe7\xf3\x0e\x4b\x5f\x05\x65\x68\x77\x69\x39\xbf\xea\xb6\x3a\x04\x7f\x89\x29\x17\x78\x06\xdd\x3b\x49\x15\x8a\x23\xa9\xfa\x96\x33\xf5\xb2\xad\x9a\xc5\x21\xcb\xb3\x79\x17\x53\x7d\xf1\x8a\xc4\x54\xad\x7d\xf8\x66\xbb\x16\x7a\xa3\x83\x95\x98\x33\x85\x4c\xf9\x60\xfc\x2f\x9d\x79\x89\x31\x80\xb4\x79\xb0\x45\x57\x56\x7b\xfc\x77\xf8\x6e\x23\xe1\x3e\x52\x81\xe9\x21\xa0\xf9\x00\xa1\xf0\x49\xd9\xa4\xa0\x99\xae\x1a\x6d\x77\x2c\xc8\xc8\xe3\x20\x79\xa0\xec\xf4\xf5\x50\x4b\x45\xd3\xb5\xdd\x73\x91\x15\x89\xd1\x5e\xa2\x5a\x21\xb2\x31\x9a\x53\x92\x8c\xc6\xaf\x6a\xa5\xfa\x52\x6e\x4a\xb1\xaa\x90\x08\xc2\x62\xf4\x81\x71\x36\x0a\xf6\xb8\x3a\xb6\x77\x78\xad\x74\xaa\x77\x97\xbb\x3a\x1e\x1c\xde\xaa\xbb\xcb\xea\x49\xff\x8d\x0d\xe8\xb2\xdd\x37\xbb\x55\xcc\x17\x63\x8d\x4d\xe9\x9f\xa6\x69\xba\xf8\xeb\x2f\x5c\xfb\x1d\xb8\x9b\x8e\x12\xb8\x6d\x73\x0f\x74\x7b\xe8\x3a\x56\xfb\xc1\x46\x3d\x54\xb0\xf9\x30\xa3\x20\x9f\x45\x81\xab\xff\xe5\x73\xfd\x30\x8f\x02\x46\x1e\xa3\x60\xd9\x86\x2f\x2e\x88\x94\xa1\x31\x8a\xa8\x01\x34\x09\x0d\x1d\x74\x65\x44\x01\xed\x24\x52\x02\x29\xb1\xd5\x8a\x2a\x85\x42\xf7\x3a\x1a\x05\x6e\x0b\xf2\x97\x60\x0c\x57\xcd\x7c\x31\xa2\xef\x71\xd5\x8e\x9a\x41\xd7\x6d\xe8\xb8\x1d\xdf\xd6\x1f\xb7\x77\x68\xdc\x91\x07\xf7\xd2\x9a\xb5\x9d\x2c\x43\xd5\x4e\xb0\xd7\x3a\xa0\xd6\x64\x54\x0f\xdd\xf5\x48\x04\x14\xa8\x69\x4b\x08\xc1\xf4\x66\xf3\xf3\x8b\xcb\xab\xaf\xaf\xbf\x79\xf9\xea\xf5\x9b\x7f\x7f\x6b\x2e\x0e\x6a\x34\x09\xd2\xf2\xa7\x07\x04\x52\x2e\xc0\xd2\x52\x14\x42\xf0\x16\x40\x21\x80\xab\x05\xd0\xe9\x14\x0e\x31\xe8\x13\x0e\xd3\xb0\xa3\xf2\xe9\x3b\xa2\x72\x27\x2d\x38\x17\x56\xf3\x28\x1a\x37\xac\x09\xfc\x13\x66\x57\x93\xfb\x7d\xa3\xcf\x7b\x2b\x02\x55\x2d\x58\x0b\x3d\xc8\x3f\x1f\x8c\x52\x13\x75\x6b\xb2\x43\xee\x85\x93\xa1\x7a\xf7\xe3\x87\xef\x2d\x43\x0f\x75\x21\x1d\xca\xdd\x1b\x3d\xf3\x7c\xd7\xfd\x4d\xab\x48\xce\x12\x94\x34\x63\xcd\xc4\x5b\x55\xf6\x83\xe4\xcc\xad\xb8\x54\xf2\x26\xa5\x85\x42\xf1\xa9\x29\xf3\xe5\xfa\x3e\xd4\x2e\x7c\xb5\x59\x6c\x24\x7e\xad\x50\xfc\x5a\x91\x0c\xef\xc3\xd9\x57\x31\x29\x0a\xdd\xfc\x43\xe3\xac\x67\x66\x91\x83\xf1\xa2\x29\x58\xc4\x29\x90\x65\x2a\x87\x00\x66\xbb\xb4\x3b\xf6\x96\x99\xcf\xcc\x89\xa3\x27\xab\x65\x04\x58\x46\x3f\x08\xbe\x2c\xb0\x84\x3b\x54\x82\xe2\x23\x65\x19\xa4\x82\x97\x40\x2a\x1a\xb8\x58\x46\xc6\x64\x3f\xae\x1d\xd2\x7c\x0b\xe9\x35\x2f\xab\x5a\xa1\x00\x49\xd6\x12\x18\x3f\xae\xfe\x8c\x85\xc4\xc3\x04\x75\x89\x88\xa1\x3c\x21\xdc\xab\xd7\xa3\x74\xf4\xc7\x6d\x4e\x9c\x58\x4a\xeb\x0f\x30\x87\xa1\x69\xfa\x63\xc4\x33\x30\x9b\xec\x9b\xb0\xb5\x0c\xcf\xc7\x81\xc7\xdd\x73\x63\xc0\xdc\x9d\xc9\xe6\xd9\x18\xed\x08\x56\xcc\x99\xe4\x05\x3a\x05\xcf\x2c\xf2\xc9\xbb\xff\x93\xd0\xf6\x49\x7a\xd1\x48\x3a\x9b\x1e\x3f\x71\xf4\xd4\xb0\x26\x5f\x92\x94\x46\xaf\x39\x96\x1e\x91\xd6\xb1\x96\x39\x11\xf8\x13\x3e\x29\x08\x01\x99\x3e\xa4\x7e\xbc\xbb\xd5\x99\xe4\x0c\x99\xb2\x4c\xc3\x9c\x1e\x66\x30\x35\x0d\x30\xa7\x83\x8d\xa9\xd9\xbd\xea\xd3\xe5\xd4\x04\xeb\x91\x12\xf8\x57\x55\xf0\x44\x3d\x4e\xcc\xa3\x84\x8d\xd3\xb6\x71\x4e\x9c\xb8\xa0\xf1\x67\xab\xaf\xf3\x63\x6d\x01\x9a\x33\x12\x4b\xf8\xca\xe1\x15\x32\xab\x3f\x6f\x6e\x3a\x6d\xf3\xd5\x35\x6e\xdd\x68\xa6\xa1\x31\xed\x7d\x3c\x42\xe2\x60\xea\xf7\x7b\xc7\x0b\xcb\xdc\xf4\x58\x73\xe2\xa4\x24\xc1\x5b\xb6\x57\x8d\x63\xa8\x01\xe1\x85\x05\x09\x8f\xeb\x12\x99\x82\x89\x23\x90\x24\xeb\xe3\x7e\x6e\x99\xc9\x69\x82\xbb\x46\x86\xd6\xb4\xd8\x51\x04\xe3\xb4\x1f\x1c\xf0\x45\x01\x3d\x86\xa5\xfd\x38\x81\xbf\x8d\x5d\x1a\xce\xea\x81\xdb\xce\xd1\xc0\x6d\x7f\x4c\xfd\x3f\x00\x00\xff\xff\x58\x16\xe6\xb7\x5d\x0d\x00\x00")

func randomHtmlBytes() ([]byte, error) {
	return bindataRead(
		_randomHtml,
		"random.html",
	)
}

func randomHtml() (*asset, error) {
	bytes, err := randomHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "random.html", size: 3421, mode: os.FileMode(420), modTime: time.Unix(1480201746, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"random.html": randomHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"random.html": &bintree{randomHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

